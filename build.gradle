import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
    repositories {
        maven { url "https://files.minecraftforge.net/maven" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.64'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

repositories {
}

sourceSets {
    main.resources.srcDirs += 'src/main/generated/resources'
}

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        if (findProject(':Workspace') == null) {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'debug'

                mods {
                    portalinterfaces {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'debug'

                mods {
                    portalinterfaces {
                        source sourceSets.main
                    }
                }
            }
        }

        data {
            workingDirectory project.file('run')

            if (findProject(':Workspace') != null) {
                ideaModule '1.16.PortalInterfaces.main'
            }

            args '--mod', 'portalinterfaces', '--all', '--output', file('src/main/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                portalinterfaces {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

def toml_properties = [
        'version': project.version,
        'minecraft_version': minecraft_version,
        'forge_version': forge_version,
        'loader_version': forge_version.tokenize('.').get(0)
]

processResources {
    inputs.property 'version', project.version
    inputs.property 'minecraft_version', minecraft_version
    inputs.property 'forge_version', forge_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand toml_properties
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes([
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "Yunus1903",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" : "Yunus1903",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives sourcesJar
}

jar {
    manifest {
        attributes([
            "Specification-Title": "${mod_name}",
            "Specification-Vendor": "Yunus1903",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "Yunus1903",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task generateChangelog(type: GitChangelogTask) {
    file = new File("changelog.html")
    untaggedName = "${minecraft_version}-${mod_version}"
    fromRepo = file(".")
    toRef = "HEAD"
    templateContent = file("changelog.mustache").getText("UTF-8")
}

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforgeKey")
        project {
            id = curseforge_id
            releaseType = curseforge_release_type
            changelogType = "html"
            changelog = file("changelog.html")
            mainArtifact jar
            addArtifact sourcesJar
        }
        options {
            debug = System.getenv("DEBUG") ?: false
        }
    }
}
